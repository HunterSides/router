"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3669],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(r),f=o,d=m["".concat(i,".").concat(f)]||m[f]||c[f]||a;return r?n.createElement(d,l(l({ref:t},u),{},{components:r})):n.createElement(d,l({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5046:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={title:"Styling"},l=void 0,s={unversionedId:"lab/styles",id:"lab/styles",title:"Styling",description:"This guide refers to upcoming Expo Router features, all of which are experimental. You may need to use Expo CLI on main to use these features.",source:"@site/docs/lab/styles.md",sourceDirName:"lab",slug:"/lab/styles",permalink:"/router/docs/lab/styles",draft:!1,editUrl:"https://github.com/expo/router/tree/main/docs/docs/lab/styles.md",tags:[],version:"current",frontMatter:{title:"Styling"},sidebar:"tutorialSidebar",previous:{title:"window.location",permalink:"/router/docs/lab/runtime-location"},next:{title:"TypeScript",permalink:"/router/docs/lab/typescript"}},i={},p=[{value:"Global Styles",id:"global-styles",level:2},{value:"Setup",id:"setup",level:2},{value:"Advanced Setup",id:"advanced-setup",level:3}],u={toc:p};function c(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"This guide refers to upcoming Expo Router features, all of which are experimental. You may need to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/expo/expo/tree/main/packages/%40expo/cli#contributing"},"use Expo CLI on ",(0,o.kt)("inlineCode",{parentName:"a"},"main"))," to use these features.")),(0,o.kt)("p",null,"Expo Router adds first-class support for a number of CSS features which can be leveraged to create more optimized web experiences."),(0,o.kt)("p",null,"The preferred way to style your application is to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"StyleSheet")," API. This API is available on both web and native."),(0,o.kt)("h2",{id:"global-styles"},"Global Styles"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"First available in ",(0,o.kt)("inlineCode",{parentName:"p"},"expo-router@1.2.2"),".")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Warning: Global styles are web-only, usage will cause your application to diverge visually on native.")),(0,o.kt)("p",null,"You can import a CSS file from any component. The CSS will be applied to the entire page."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=App.js",title:"App.js"},'import "./styles.css";\n\nexport default function App() {\n  return <div className="container">Hello World</div>;\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css",metastring:"title=styles.css",title:"styles.css"},".container {\n  background-color: red;\n}\n")),(0,o.kt)("p",null,"This technique also applies to stylesheets that are vendored in libraries."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=App.js",title:"App.js"},'// Applies the styles app-wide.\nimport "emoji-mart/css/emoji-mart.css";\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"On native, all global stylesheets are automatically ignored."),(0,o.kt)("li",{parentName:"ul"},"Hot reloading is supported for global stylesheets, simply save the file and the changes will be applied.")),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("p",null,"To enable CSS support, add the following changes to your Metro configuration:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add ",(0,o.kt)("inlineCode",{parentName:"li"},"css")," to the list of source extensions."),(0,o.kt)("li",{parentName:"ul"},"Use the Expo Babel transformer.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=metro.config.js",title:"metro.config.js"},'// Learn more https://docs.expo.io/guides/customizing-metro\nconst { getDefaultConfig } = require("expo/metro-config");\n\nconst config = getDefaultConfig(__dirname);\n\nconfig.transformer = {\n  ...config.transformer,\n  // Use the Expo transformer.\n  babelTransformerPath: require.resolve("@expo/metro-runtime/transformer"),\n};\n\n// Ensure CSS is treated as a source file.\nconfig.resolver.sourceExts.push("css");\n\nmodule.exports = config;\n')),(0,o.kt)("h3",{id:"advanced-setup"},"Advanced Setup"),(0,o.kt)("p",null,"If you need to apply other transformations to your source before using the CSS transformer, you can create a custom Metro transformer."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=transformer.js",title:"transformer.js"},'const ExpoTransformer = require("@expo/metro-runtime/transformer");\n\nmodule.exports.transform = async (props) => {\n  // Mutate the `props` as needed before passing it to the Expo transformer.\n\n  // The Expo transformer will apply any changes then run through the default\n  // Metro transformer.\n  return ExpoTransformer.transform(props);\n};\n')))}c.isMDXComponent=!0}}]);