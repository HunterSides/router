"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[592],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,g=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3789:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={title:"Layouts",sidebar_position:4},i=void 0,s={unversionedId:"features/layouts",id:"features/layouts",title:"Layouts",description:"Layouts are parent components that provide a shared UI-driven navigation experience across multiple screens.",source:"@site/docs/features/layouts.md",sourceDirName:"features",slug:"/features/layouts",permalink:"/router/docs/features/layouts",draft:!1,editUrl:"https://github.com/expo/router/tree/main/docs/docs/features/layouts.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Layouts",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Layout Routes",permalink:"/router/docs/features/layout-routes"},next:{title:"Dynamic Routes",permalink:"/router/docs/features/dynamic-routes"}},l={},u=[{value:"Native",id:"native",level:2},{value:"Custom",id:"custom",level:2},{value:"Converting Navigators to Layouts",id:"converting-navigators-to-layouts",level:2}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Layouts are parent components that provide a shared UI-driven navigation experience across multiple screens."),(0,r.kt)("p",null,"The simplest layouts (suited for web) are custom navigators that provide a single screen at a time. You can create a custom navigator by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Children />")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=app/_layout.js",title:"app/_layout.js"},'// highlight-next-line\nimport { Children } from "expo-router";\n\nexport default function Page() {\n  // Renders the matching child route.\n  // highlight-next-line\n  return <Children />;\n}\n')),(0,r.kt)("p",null,"Now create a child route to render inside the parent route:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=app/child.js",title:"app/child.js"},"export default function Page() {\n  return <View />;\n}\n")),(0,r.kt)("p",null,"You can extend this to create a basic layout like the ones found in most websites:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=app/_layout.js",title:"app/_layout.js"},'import { View } from "react-native";\n// highlight-next-line\nimport { Children, Link } from "expo-router";\n\nexport default function App() {\n  return (\n    <>\n      {/* A basic navigation bar for web. */}\n      <View>\n        {/* It\'s better to use the Link component, but this works too. */}\n        <Link href="/">Home</Link>\n        <Link href="/profile">Profile</Link>\n        <Link href="/settings">Settings</Link>\n      </View>\n      {/* Renders the selected child element. */}\n      <Children />\n    </>\n  );\n}\n')),(0,r.kt)("h2",{id:"native"},"Native"),(0,r.kt)("p",null,"For that native feel, we have a few native navigators that you can use. These are ",(0,r.kt)("strong",{parentName:"p"},"React Navigation")," core navigators that have been wrapped to automatically use nested screens."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Stack")," - A stack navigator that renders a screen from a stack. This is a native stack navigator that uses native animations and gestures. ",(0,r.kt)("inlineCode",{parentName:"li"},"@react-navigation/native-stack")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Tabs")," - A tab navigator that renders a screen from a tab. ",(0,r.kt)("inlineCode",{parentName:"li"},"@react-navigation/bottom-tabs"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// highlight-next-line\nimport { Tabs } from 'expo-router';\n\nexport default function Page() {\n  // Accepts the same props as the React Navigation bottom tabs navigator.\n  // The most common props are `screenOptions` and `initialRouteName`.\n  // highlight-next-line\n  return <Tabs { ... } />\n}\n")),(0,r.kt)("p",null,"Or even shorter form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Tabs } from "expo-router";\n\nexport default Tabs;\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"@react-navigation/stack")," is not supported by default, you can use it by creating a custom layout.")),(0,r.kt)("h2",{id:"custom"},"Custom"),(0,r.kt)("p",null,"Custom layouts have an internal context that is ignored when using the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Children />")," component without a ",(0,r.kt)("inlineCode",{parentName:"p"},"<Layout />")," component wrapping it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { View } from "react-native";\nimport { TabRouter } from "@react-navigation/native";\n\nimport { Layout, useSegments, Children, Link } from "expo-router";\n\nexport default function App() {\n  return (\n    // highlight-next-line\n    <Layout router={TabRouter}>\n      <Header />\n      <Children />\n    </Layout>\n  );\n}\n\nfunction Header() {\n  const { navigation, state, descriptors, router } = Layout.useContext();\n\n  const [segment] = useSegments();\n\n  return (\n    <View>\n      <Link href="/">Home</Link>\n      <Link\n        href="/profile"\n        // Use `pathname` to determine if the link is active.\n        // highlight-next-line\n        style={[segment === "profile" && { color: "blue" }]}\n      >\n        Profile\n      </Link>\n      <Link href="/settings">Settings</Link>\n    </View>\n  );\n}\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"In ",(0,r.kt)("inlineCode",{parentName:"p"},"expo-router"),", you currently need all layout routes to be a navigator. This is because we don't have a way to render a route without a parent navigator.")),(0,r.kt)("h2",{id:"converting-navigators-to-layouts"},"Converting Navigators to Layouts"),(0,r.kt)("p",null,"You can make a React Navigation navigator into a layout by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"withLayoutContext")," function. Consider this example which makes a drawer navigator from ",(0,r.kt)("inlineCode",{parentName:"p"},"@react-navigation/drawer")," into a layout:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import {\n  createDrawerNavigator,\n  DrawerNavigationOptions,\n} from "@react-navigation/drawer";\n\nimport { withLayoutContext } from "expo-router";\n\nconst { Navigator } = createDrawerNavigator();\n\n// Drawer is a layout component that can be automatically populated with routes.\nexport const Drawer = withLayoutContext<\n  DrawerNavigationOptions,\n  typeof Navigator\n>(Navigator);\n')))}c.isMDXComponent=!0}}]);