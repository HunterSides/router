"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1552],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,y=u["".concat(p,".").concat(m)]||u[m]||c[m]||a;return n?r.createElement(y,l(l({ref:t},d),{},{components:n})):r.createElement(y,l({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5610:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const a={title:"TypeScript"},l=void 0,o={unversionedId:"lab/typescript",id:"lab/typescript",title:"TypeScript",description:"This guide requires expo@49.0.0-alpha.3 or greater\u2013\u2013everything listed here is still experimental.",source:"@site/docs/lab/typescript.md",sourceDirName:"lab",slug:"/lab/typescript",permalink:"/router/docs/lab/typescript",draft:!1,editUrl:"https://github.com/expo/router/tree/main/docs/docs/lab/typescript.md",tags:[],version:"current",frontMatter:{title:"TypeScript"},sidebar:"tutorialSidebar",previous:{title:"Styling",permalink:"/router/docs/lab/styles"}},p={},s=[{value:"Statically Typed Links",id:"statically-typed-links",level:2},{value:"Changes made to environment",id:"changes-made-to-environment",level:2},{value:"Global Types",id:"global-types",level:3},{value:"React Native Web",id:"react-native-web",level:3}],d={toc:s};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This guide requires ",(0,i.kt)("inlineCode",{parentName:"p"},"expo@49.0.0-alpha.3")," or greater\u2013\u2013everything listed here is still experimental.")),(0,i.kt)("p",null,"Expo Router provides an integrated TypeScript experience. To get started:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Install TypeScript either by ",(0,i.kt)("inlineCode",{parentName:"li"},"yarn add -D typescript")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"npm i -D typescript")),(0,i.kt)("li",{parentName:"ul"},"Run ",(0,i.kt)("inlineCode",{parentName:"li"},"npx tsc --init")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"yarn tsc --init")," to initialise TypeScript"),(0,i.kt)("li",{parentName:"ul"},"Set the environment variable ",(0,i.kt)("inlineCode",{parentName:"li"},"EXPO_USE_TYPED_ROUTES=true"))),(0,i.kt)("p",null,"When enabled, Expo Router will automatically adjust your environment to ensure Expo Router types are picked up by the TypeScript compiler."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"If ",(0,i.kt)("inlineCode",{parentName:"p"},"EXPO_USE_TYPED_ROUTES")," is removed, Expo Router will remove the changes it made")),(0,i.kt)("h2",{id:"statically-typed-links"},"Statically Typed Links"),(0,i.kt)("p",null,"Expo Router will generate a link definition in ",(0,i.kt)("inlineCode",{parentName:"p"},".expo/types")," that contains information about existing routes in your application. This overrides Expo Router's generic ",(0,i.kt)("inlineCode",{parentName:"p"},"Href<T>")," definition with a personalised declaration."),(0,i.kt)("p",null,"Components and functions that use ",(0,i.kt)("inlineCode",{parentName:"p"},"Href<T>")," will now by statically typed and have a much stricter definition. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// \u2705\n<Link href="/about" />\n// \u2705\n<Link href="/user/1" />\n// \u2705\n<Link href={`/user/${id}`} />\n// \u2705\n<Link href={(\'/user\' + id) as Href} />\n\n// \u274c TypeScript errors if href is not a valid route\n<Link href="/usser/1" />\n')),(0,i.kt)("p",null,"For dynamic routes, Href's need to be objects and their parameters are strictly typed"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// \u2705\n<Link href={{ pathname: "/user/[id]", params: { id: 1 }}} />\n\n\n// \u274c TypeScript errors as href is valid, but it should be a HrefObject with params\n<Link href="/user/[id]" />\n// \u274c TypeScript errors as params contains invalid keys\n<Link href={{ pathname: "/user/[id]", params: { _id: 1 }}} />\n// \u274c TypeScript errors as params contains unknown keys\n<Link href={{ pathname: "/user/[id]", params: { id: 1, id2: 2 }}} />\n')),(0,i.kt)("h2",{id:"changes-made-to-environment"},"Changes made to environment"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"includes")," field of your ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," will be updated to include ",(0,i.kt)("inlineCode",{parentName:"p"},"expo-env.d.ts")," and a hidden ",(0,i.kt)("inlineCode",{parentName:"p"},".expo")," folder. These entries are required and should not be removed."),(0,i.kt)("p",null,"The generated ",(0,i.kt)("inlineCode",{parentName:"p"},"expo-env.d.ts")," should not be removed or changed at any time. It should not be committed and should be ignored by version control (e.g. inside your .gitignore file)."),(0,i.kt)("h3",{id:"global-types"},"Global Types"),(0,i.kt)("p",null,"Expo Router makes the following changes to your TypeScript environment."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Sets ",(0,i.kt)("inlineCode",{parentName:"li"},'process.env.NODE_ENV = "development" | "production" | "test"')),(0,i.kt)("li",{parentName:"ul"},"Allows the importing of ",(0,i.kt)("inlineCode",{parentName:"li"},".[css|sass|scss]")," files"),(0,i.kt)("li",{parentName:"ul"},"Sets the exports of ",(0,i.kt)("inlineCode",{parentName:"li"},"*.module.[css|sass|scss]")," to be ",(0,i.kt)("inlineCode",{parentName:"li"},"Record<string, string")),(0,i.kt)("li",{parentName:"ul"},"Add types for Metro's ",(0,i.kt)("inlineCode",{parentName:"li"},"require.context"))),(0,i.kt)("h3",{id:"react-native-web"},"React Native Web"),(0,i.kt)("p",null,"Using ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html"},"Declaration Merging"),", Expo Router adds additional types for React Native Web."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add additional web-only styles for ",(0,i.kt)("inlineCode",{parentName:"li"},"ViewStyle/TextStyle/ImageStyle")),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"tabIndex"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"accessibilityLevel"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"lang")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"TextProps")),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"hovered")," to Pressable's ",(0,i.kt)("inlineCode",{parentName:"li"},"children")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"style")," state callback function")))}c.isMDXComponent=!0}}]);