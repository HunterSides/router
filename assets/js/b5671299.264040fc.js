"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[748],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=i,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||o;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9100:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const o={title:"Navigation Container",sidebar_position:6},r=void 0,l={unversionedId:"features/container",id:"features/container",title:"Navigation Container",description:"The global React Navigation ` is managed by Expo Router, you can pass it props like theme from any screen by using the ` component but this is discouraged.",source:"@site/docs/features/container.md",sourceDirName:"features",slug:"/features/container",permalink:"/router/docs/features/container",draft:!1,editUrl:"https://github.com/expo/router/tree/main/docs/docs/features/container.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Navigation Container",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Screen Options",permalink:"/router/docs/features/options"},next:{title:"Error handling",permalink:"/router/docs/features/errors"}},s={},p=[{value:"Statics",id:"statics",level:2},{value:"<code>RootContainer.useRef()</code>",id:"rootcontaineruseref",level:2},{value:"<code>RootContainer.useState()</code>",id:"rootcontainerusestate",level:2},{value:"Restrictions",id:"restrictions",level:2},{value:"<code>theme</code>",id:"theme",level:3},{value:"<code>onReady</code>",id:"onready",level:3},{value:"<code>children</code>",id:"children",level:3},{value:"<code>linking</code>",id:"linking",level:3},{value:"<code>initialState</code>",id:"initialstate",level:3},{value:"<code>independent</code>",id:"independent",level:3},{value:"<code>onUnhandledAction</code>",id:"onunhandledaction",level:3},{value:"<code>fallback</code>",id:"fallback",level:3},{value:"<code>onStateChange</code>",id:"onstatechange",level:3},{value:"<code>ref</code>",id:"ref",level:3}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The global React Navigation ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/navigation-container/"},(0,i.kt)("inlineCode",{parentName:"a"},"<NavigationContainer />"))," is managed by Expo Router, you can pass it props like ",(0,i.kt)("inlineCode",{parentName:"p"},"theme")," from any screen by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"<RootContainer />")," component but this is discouraged."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=app/_layout.tsx",title:"app/_layout.tsx"},'import { RootContainer, Children } from "expo-router";\nimport { DarkTheme } from "@react-navigation/native";\n\nexport default function RootLayout() {\n  return (\n    <>\n      {/* These props will be applied to the parent NavigationContainer. */}\n      // highlight-next-line\n      <RootContainer theme={DarkTheme} />\n      <Children />\n    </>\n  );\n}\n')),(0,i.kt)("h2",{id:"statics"},"Statics"),(0,i.kt)("h2",{id:"rootcontaineruseref"},(0,i.kt)("inlineCode",{parentName:"h2"},"RootContainer.useRef()")),(0,i.kt)("p",null,"Access the ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/navigation-container/"},(0,i.kt)("inlineCode",{parentName:"a"},"<NavigationContainer />"))," ref with the ",(0,i.kt)("inlineCode",{parentName:"p"},"RootContainer.useRef()")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=app/home.tsx",title:"app/home.tsx"},"function Page() {\n  // Returns null when the container has not finished mounting.\n  const navigationRef = RootContainer.useRef();\n  return <>...</>;\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"RootContainer.useRef()")," can be used to determine if the container has finished loading."),(0,i.kt)("h2",{id:"rootcontainerusestate"},(0,i.kt)("inlineCode",{parentName:"h2"},"RootContainer.useState()")),(0,i.kt)("p",null,"Access the root navigation state with the ",(0,i.kt)("inlineCode",{parentName:"p"},"RootContainer.useState()")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=app/home.tsx",title:"app/home.tsx"},"function Page() {\n  const state = RootContainer.useState();\n  return <>...</>;\n}\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Use this hook instead of the ",(0,i.kt)("inlineCode",{parentName:"p"},"onStateChange")," property.")),(0,i.kt)("h2",{id:"restrictions"},"Restrictions"),(0,i.kt)("p",null,"The navigation container has many props that should not be used with Expo Router. Carefully reconsider how your app is using the following props before migrating to Expo Router."),(0,i.kt)("h3",{id:"theme"},(0,i.kt)("inlineCode",{parentName:"h3"},"theme")),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"<ThemeProvider />")," component instead. Learn more in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/themes"},"Themes guide"),"."),(0,i.kt)("h3",{id:"onready"},(0,i.kt)("inlineCode",{parentName:"h3"},"onReady")),(0,i.kt)("p",null,"In React Navigation, ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/navigation-container/#onready"},(0,i.kt)("inlineCode",{parentName:"a"},"onReady"))," is most often used to determine when the splash screen should hide or when to track screens using analytics. Expo Router has special handling for these use cases."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"See the ",(0,i.kt)("a",{parentName:"li",href:"/docs/guides/screen-tracking"},"Screen Tracking guide")," for info on migrating analytics from React Navigation."),(0,i.kt)("li",{parentName:"ul"},"See the ",(0,i.kt)("a",{parentName:"li",href:"/router/docs/features/splash"},"Splash Screen feature")," for info on handling the splash screen.")),(0,i.kt)("h3",{id:"children"},(0,i.kt)("inlineCode",{parentName:"h3"},"children")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," prop is a automatically populated based on the files in the ",(0,i.kt)("inlineCode",{parentName:"p"},"app/")," directory, and the currently open URL."),(0,i.kt)("h3",{id:"linking"},(0,i.kt)("inlineCode",{parentName:"h3"},"linking")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/navigation-container/#linking"},(0,i.kt)("inlineCode",{parentName:"a"},"linking"))," prop can only be constructed by adding files to the ",(0,i.kt)("inlineCode",{parentName:"p"},"app/")," directory."),(0,i.kt)("h3",{id:"initialstate"},(0,i.kt)("inlineCode",{parentName:"h3"},"initialState")),(0,i.kt)("p",null,"In React Navigation, the state can vary in complexity meaning rehydration requires a complex JavaScript object. In Expo Router, you can rehydrate your application state from a URL. Use ",(0,i.kt)("a",{parentName:"p",href:"/docs/features/linking#redirect"},"redirects")," to handle initial states."),(0,i.kt)("p",null,"Avoid using this pattern in favor of standard deep linking (e.g. user opens your app to ",(0,i.kt)("inlineCode",{parentName:"p"},"/profile")," rather than from the home screen) as it is most analogous to the web."),(0,i.kt)("h3",{id:"independent"},(0,i.kt)("inlineCode",{parentName:"h3"},"independent")),(0,i.kt)("p",null,"Expo Router does not support ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/navigation-container/#independent"},(0,i.kt)("inlineCode",{parentName:"a"},"independent"))," containers. This is because the router is responsible for managing the single ",(0,i.kt)("inlineCode",{parentName:"p"},"<NavigationContainer />"),". Any additional containers will not be automatically managed by Expo Router."),(0,i.kt)("h3",{id:"onunhandledaction"},(0,i.kt)("inlineCode",{parentName:"h3"},"onUnhandledAction")),(0,i.kt)("p",null,"Use dynamic routes and ",(0,i.kt)("a",{parentName:"p",href:"/docs/features/unmatched"},"404 screens")," in favor of ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/navigation-container/#onunhandledaction"},(0,i.kt)("inlineCode",{parentName:"a"},"onUnhandledAction")),"."),(0,i.kt)("h3",{id:"fallback"},(0,i.kt)("inlineCode",{parentName:"h3"},"fallback")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/navigation-container/#fallback"},(0,i.kt)("inlineCode",{parentName:"a"},"fallback"))," property is not required as Expo Router will prevent hiding the native splash screen until UI can be displayed."),(0,i.kt)("h3",{id:"onstatechange"},(0,i.kt)("inlineCode",{parentName:"h3"},"onStateChange")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"React Navigation also recommends avoiding ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/navigation-container/#onstatechange"},(0,i.kt)("inlineCode",{parentName:"a"},"onStateChange")),".")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you're attempting to track screen changes follow the ",(0,i.kt)("a",{parentName:"li",href:"/docs/guides/screen-tracking"},"Screen Tracking guide")," instead."),(0,i.kt)("li",{parentName:"ul"},"If you need to see when the root navigation state changes (discouraged as the state format can change between versions), use the ",(0,i.kt)("inlineCode",{parentName:"li"},"RootContainer.useState()")," hook instead."),(0,i.kt)("li",{parentName:"ul"},"If you want to get the navigation state as a callback, then get the ",(0,i.kt)("inlineCode",{parentName:"li"},"navigation")," object with ",(0,i.kt)("inlineCode",{parentName:"li"},"useNavigation")," and invoke ",(0,i.kt)("inlineCode",{parentName:"li"},'navigation.addListener("state", ({ data: { state } }) => { })'),".")),(0,i.kt)("h3",{id:"ref"},(0,i.kt)("inlineCode",{parentName:"h3"},"ref")),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"RootContainer.useRef()")," function instead."))}d.isMDXComponent=!0}}]);