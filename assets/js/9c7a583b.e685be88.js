"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[965],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,g=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8619:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={title:"From React Navigation"},i=void 0,l={unversionedId:"migration/from-react-navigation",id:"migration/from-react-navigation",title:"From React Navigation",description:"Prefer using index routes to setting initialRouteName in the navigator.",source:"@site/docs/migration/from-react-navigation.md",sourceDirName:"migration",slug:"/migration/from-react-navigation",permalink:"/router/docs/migration/from-react-navigation",draft:!1,editUrl:"https://github.com/expo/router/tree/main/docs/docs/migration/from-react-navigation.md",tags:[],version:"current",frontMatter:{title:"From React Navigation"},sidebar:"tutorialSidebar",previous:{title:"Migration",permalink:"/router/docs/category/migration"},next:{title:"FAQ",permalink:"/router/docs/faq"}},p={},s=[{value:"Navigators",id:"navigators",level:3},{value:"Link",id:"link",level:3},{value:"Screen Options",id:"screen-options",level:3}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Prefer using index routes to setting ",(0,a.kt)("inlineCode",{parentName:"p"},"initialRouteName")," in the navigator."),(0,a.kt)("p",null,"Use lowercase route names to be more consistent with the web: ",(0,a.kt)("inlineCode",{parentName:"p"},"Home")," -> ",(0,a.kt)("inlineCode",{parentName:"p"},"home"),"."),(0,a.kt)("p",null,"Export named components as default:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"// Yes: This makes debugging easier and keeps Metro Fast Refresh working.\nexport default function Name() {\n  return <View />;\n}\n\n// No: This breaks Fast Refresh.\nexport default function () {\n  return <View />;\n}\n")),(0,a.kt)("p",null,"If you were passing complex options through the navigator, you should move to using ",(0,a.kt)("a",{parentName:"p",href:"https://reactnavigation.org/docs/hello-react-navigation#passing-additional-props"},"React context instead"),"."),(0,a.kt)("h3",{id:"navigators"},"Navigators"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"React Navigation"),(0,a.kt)("th",{parentName:"tr",align:null},"Expo Router"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"createNativeStackNavigator")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Stack"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"createBottomTabNavigator")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Tabs"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"createDrawerNavigator")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/router/docs/guides/drawer"},(0,a.kt)("inlineCode",{parentName:"a"},"Drawer"))," (setup required)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"createStackNavigator")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/router/docs/features/layouts#converting-navigators-to-layouts"},"Create a custom layout"))))),(0,a.kt)("p",null,"Expo Router wraps React Navigation APIs and re-exports them with light-weight context-aware wrappers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'// No: This is a React Navigation API.\nimport { createStackNavigator } from "@react-navigation/native-stack";\n\nconst Stack = createStackNavigator();\n\n// Yes: This is an Expo Router API.\nimport { Stack } from "expo-router";\n')),(0,a.kt)("h3",{id:"link"},"Link"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"Link")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"expo-router")," as this provides child context."),(0,a.kt)("p",null,"Migrate from ",(0,a.kt)("inlineCode",{parentName:"p"},"useNavigation()")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"useRouter()")," for navigating between screens."),(0,a.kt)("h3",{id:"screen-options"},"Screen Options"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Think of this component like a ",(0,a.kt)("inlineCode",{parentName:"p"},"<head />")," component from web frameworks.")),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"<[Layout].Screen />")," in your screens to keep configuration in a single file. We don't currently bundle split as Metro doesn't support this yet, but we will in the future and self-contained configuration will lead to faster app startup."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Tabs } from "expo-router";\n\nexport default function Home() {\n  return (\n    <View>\n      <Tabs.Screen option={{ title: "Home" }} />\n    </View>\n  );\n}\n')))}u.isMDXComponent=!0}}]);