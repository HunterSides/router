diff --git a/node_modules/expo-image-picker/build/ExponentImagePicker.web.js b/node_modules/expo-image-picker/build/ExponentImagePicker.web.js
index 5b51a3e..90c7072 100644
--- a/node_modules/expo-image-picker/build/ExponentImagePicker.web.js
+++ b/node_modules/expo-image-picker/build/ExponentImagePicker.web.js
@@ -5,53 +5,7 @@ const MediaTypeInput = {
     [MediaTypeOptions.Images]: 'image/*',
     [MediaTypeOptions.Videos]: 'video/mp4,video/quicktime,video/x-m4v,video/*',
 };
-export default {
-    get name() {
-        return 'ExponentImagePicker';
-    },
-    async launchImageLibraryAsync({ mediaTypes = MediaTypeOptions.Images, allowsMultipleSelection = false, base64 = false, }) {
-        // SSR guard
-        if (!Platform.isDOMAvailable) {
-            return { canceled: true, assets: null };
-        }
-        return await openFileBrowserAsync({
-            mediaTypes,
-            allowsMultipleSelection,
-            base64,
-        });
-    },
-    async launchCameraAsync({ mediaTypes = MediaTypeOptions.Images, allowsMultipleSelection = false, base64 = false, }) {
-        // SSR guard
-        if (!Platform.isDOMAvailable) {
-            return { canceled: true, assets: null };
-        }
-        return await openFileBrowserAsync({
-            mediaTypes,
-            allowsMultipleSelection,
-            capture: true,
-            base64,
-        });
-    },
-    /*
-     * Delegate to expo-permissions to request camera permissions
-     */
-    async getCameraPermissionsAsync() {
-        return permissionGrantedResponse();
-    },
-    async requestCameraPermissionsAsync() {
-        return permissionGrantedResponse();
-    },
-    /*
-     * Camera roll permissions don't need to be requested on web, so we always
-     * respond with granted.
-     */
-    async getMediaLibraryPermissionsAsync(_writeOnly) {
-        return permissionGrantedResponse();
-    },
-    async requestMediaLibraryPermissionsAsync(_writeOnly) {
-        return permissionGrantedResponse();
-    },
-};
+
 function permissionGrantedResponse() {
     return {
         status: PermissionStatus.GRANTED,
@@ -125,3 +79,61 @@ function readFile(targetFile, options) {
     });
 }
 //# sourceMappingURL=ExponentImagePicker.web.js.map
+
+let mod = null;
+// Support web in native
+if (typeof window !== 'undefined' && window.$$web_requireNativeModule) {
+    mod = window.$$web_requireNativeModule("ExponentImagePicker");
+    console.log('got:', mod)
+} else {
+    mod = {
+        get name() {
+            return 'ExponentImagePicker';
+        },
+        async launchImageLibraryAsync({ mediaTypes = MediaTypeOptions.Images, allowsMultipleSelection = false, base64 = false, }) {
+            // SSR guard
+            if (!Platform.isDOMAvailable) {
+                return { canceled: true, assets: null };
+            }
+            return await openFileBrowserAsync({
+                mediaTypes,
+                allowsMultipleSelection,
+                base64,
+            });
+        },
+        async launchCameraAsync({ mediaTypes = MediaTypeOptions.Images, allowsMultipleSelection = false, base64 = false, }) {
+            // SSR guard
+            if (!Platform.isDOMAvailable) {
+                return { canceled: true, assets: null };
+            }
+            return await openFileBrowserAsync({
+                mediaTypes,
+                allowsMultipleSelection,
+                capture: true,
+                base64,
+            });
+        },
+        /*
+         * Delegate to expo-permissions to request camera permissions
+         */
+        async getCameraPermissionsAsync() {
+            return permissionGrantedResponse();
+        },
+        async requestCameraPermissionsAsync() {
+            return permissionGrantedResponse();
+        },
+        /*
+         * Camera roll permissions don't need to be requested on web, so we always
+         * respond with granted.
+         */
+        async getMediaLibraryPermissionsAsync(_writeOnly) {
+            return permissionGrantedResponse();
+        },
+        async requestMediaLibraryPermissionsAsync(_writeOnly) {
+            return permissionGrantedResponse();
+        },
+    };
+}
+
+// module.exports = mod;
+export default mod;
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ImagePicker.js b/node_modules/expo-image-picker/build/ImagePicker.js
index d50fe42..346f7f5 100644
--- a/node_modules/expo-image-picker/build/ImagePicker.js
+++ b/node_modules/expo-image-picker/build/ImagePicker.js
@@ -1,5 +1,6 @@
 import { PermissionStatus, createPermissionHook, UnavailabilityError, CodedError, } from 'expo-modules-core';
 import ExponentImagePicker from './ExponentImagePicker';
+console.log('ExponentImagePicker', ExponentImagePicker)
 function validateOptions(options) {
     const { aspect, quality, videoMaxDuration } = options;
     if (aspect != null) {
@@ -175,9 +176,10 @@ export async function launchCameraAsync(options = {}) {
  * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).
  */
 export async function launchImageLibraryAsync(options) {
-    if (!ExponentImagePicker.launchImageLibraryAsync) {
-        throw new UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');
-    }
+    // if (!ExponentImagePicker.launchImageLibraryAsync) {
+    //     throw new UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');
+    // }
+    console.log('>>>', ExponentImagePicker)
     if (options?.allowsEditing && options.allowsMultipleSelection) {
         console.warn('[expo-image-picker] `allowsEditing` is not supported when `allowsMultipleSelection` is enabled and will be ignored.' +
             "Disable either 'allowsEditing' or 'allowsMultipleSelection' in 'launchImageLibraryAsync' " +
